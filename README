Perfecto, Mateo 😎
Tu texto ya está muy bien escrito — solo necesitaba **correcciones menores de redacción y formato Markdown** para que se vea impecable en GitHub.
Aquí tienes la **versión final pulida y lista para pegar directamente en tu `README.md`** 👇

---

````markdown
# 🍔 Restaurant Backend API

Una API RESTful robusta y moderna para la gestión de un restaurante, construida con **Node.js**, **Express** y **MongoDB Atlas**.  
Este proyecto demuestra las mejores prácticas en el desarrollo de backend, incluyendo la gestión de conexiones a bases de datos, la creación de endpoints complejos y la implementación de una suite de pruebas automatizadas.

---

## 🚀 Características

- **Gestión de Usuarios**: Endpoints completos para crear, leer, actualizar y eliminar (CRUD) usuarios.
- **Gestión de Órdenes**: Sistema completo para gestionar las órdenes del restaurante.
  - Soporte para diferentes tipos de pedido: `mesa`, `domicilio`, `recoger`.
  - Estructura de productos detallada, permitiendo cantidades y estados individuales por unidad (ej. 2 hamburguesas, una en preparación y otra lista).
  - Propiedades como número de mesa, cantidad de personas, ID de cliente (para domicilios), total, etc.
- **Base de Datos en la Nube**: Integración con MongoDB Atlas para almacenamiento escalable y seguro.
- **Testing Automatizado**: Suite de pruebas con Jest y Supertest para asegurar la fiabilidad de la API.
- **Código Moderno**: Sintaxis de Módulos ES (`import` / `export`) siguiendo las mejores prácticas de estructura.
- **Variables de Entorno**: Configuración segura de credenciales y datos sensibles mediante `dotenv`.

---

## 🛠️ Stack Tecnológico

| Componente | Tecnología |
|-------------|-------------|
| **Lenguaje** | JavaScript (ESM) |
| **Backend** | Node.js |
| **Framework** | Express.js |
| **Base de Datos** | MongoDB (driver nativo) |
| **Testing** | Jest, Supertest |
| **Transpilación** | Babel |
| **Configuración** | dotenv |

---

## 📋 Prerrequisitos

- [Node.js](https://nodejs.org/) (versión 18 o superior)
- [npm](https://www.npmjs.com/)
- Una cuenta y cluster en [MongoDB Atlas](https://www.mongodb.com/cloud/atlas)

---

## ⚙️ Instalación y Configuración

1. **Clona el repositorio**
   ```bash
   git clone https://github.com/tu-usuario/restaurant-backend.git
   cd restaurant-backend
````

2. **Instala las dependencias**

   ```bash
   npm install
   ```

3. **Configura las variables de entorno**
   Crea un archivo llamado `.env` en la raíz del proyecto y añade tus credenciales de MongoDB Atlas.

   > ⚠️ Asegúrate de especificar el nombre de tu base de datos al final de la URI.

   ```env
   # .env

   MONGODB_URI=mongodb+srv://<usuario>:<password>@<cluster-url>/<nombre_de_tu_db>?retryWrites=true&w=majority&appName=Cluster0
   PORT=3000
   ```

   **Nota:** Si no especificas `<nombre_de_tu_db>`, se usará una base de datos por defecto llamada `test`.

4. **Prepara la base de datos**

   * Ingresa a tu cluster en MongoDB Atlas.
   * En “Browse Collections”, crea la base de datos especificada (ej. `restaurant_db`).
   * Crea las colecciones `usuarios` y `ordenes`, o deja que la app las genere automáticamente al usarlas.

---

## 🏃‍♂️ Cómo Ejecutar la Aplicación

### Iniciar el Servidor

```bash
node index.js
```

Si todo está correcto, deberías ver:

```
✅ Conectado exitosamente a MongoDB Atlas!
Servidor escuchando en http://localhost:3000
```

### Ejecutar las Pruebas

```bash
npm test
```

Esto ejecutará todas las pruebas automatizadas para los endpoints de usuarios y órdenes.

---

## 📡 Endpoints de la API

### 👤 Usuarios

| Método   | Endpoint            | Descripción                    |
| -------- | ------------------- | ------------------------------ |
| `POST`   | `/api/usuarios`     | Crea un nuevo usuario          |
| `GET`    | `/api/usuarios`     | Obtiene todos los usuarios     |
| `GET`    | `/api/usuarios/:id` | Obtiene un usuario por ID      |
| `PUT`    | `/api/usuarios/:id` | Actualiza un usuario existente |
| `DELETE` | `/api/usuarios/:id` | Elimina un usuario existente   |

**Ejemplo: Crear un nuevo usuario**

```bash
curl -X POST http://localhost:3000/api/usuarios \
-H "Content-Type: application/json" \
-d '{"nombre": "Carlos", "edad": 30, "ciudad": "Bogotá"}'
```

---

### 🍽️ Órdenes

| Método | Endpoint           | Descripción                   |
| ------ | ------------------ | ----------------------------- |
| `POST` | `/api/ordenes`     | Crea una nueva orden          |
| `GET`  | `/api/ordenes`     | Obtiene todas las órdenes     |
| `GET`  | `/api/ordenes/:id` | Obtiene una orden por ID      |
| `PUT`  | `/api/ordenes/:id` | Actualiza una orden existente |

**Ejemplo 1: Crear una orden para mesa**

```bash
curl -X POST http://localhost:3000/api/ordenes \
-H "Content-Type: application/json" \
-d '{
  "mesa": 8,
  "cantidadPersonas": 3,
  "tipoPedido": "mesa",
  "productosSolicitados": [
    {
      "nombreProducto": "Hamburguesa Especial",
      "cantidadSolicitada": 2,
      "mensaje": "Una sin tomate.",
      "estadosPorCantidad": [
        { "estado": "recibida" },
        { "estado": "recibida" }
      ]
    }
  ],
  "cantidadIps": 2,
  "total": 55000
}'
```

**Ejemplo 2: Actualizar el estado de una orden**

```bash
curl -X PUT http://localhost:3000/api/ordenes/<ID_DE_LA_ORDEN> \
-H "Content-Type: application/json" \
-d '{
  "mesa": 8,
  "cantidadPersonas": 3,
  "tipoPedido": "mesa",
  "productosSolicitados": [
    {
      "nombreProducto": "Hamburguesa Especial",
      "cantidadSolicitada": 2,
      "mensaje": "Una sin tomate.",
      "estadosPorCantidad": [
        { "estado": "cocinando" },
        { "estado": "listo_para_servir" }
      ]
    }
  ],
  "cantidadIps": 2,
  "total": 55000
}'
```

---

## 📁 Estructura del Proyecto

```
restaurant-backend/
├── .env
├── .gitignore
├── babel.config.cjs
├── jest.config.js
├── jest.setup.js
├── package.json
├── index.js
└── src/
    ├── app.js
    ├── config/
    │   └── db.js
    └── routes/
        ├── usuario.routes.js
        └── ordenes.routes.js
```

---

## 🧠 Nuestro Viaje de Aprendizaje

Este proyecto no es solo código: es el resultado de un proceso de aprendizaje, diseño y depuración.
Desde la configuración inicial del entorno, pasando por la conexión con MongoDB Atlas, hasta la creación de una suite de testing robusta, cada paso fue una oportunidad para mejorar y comprender mejor cómo construir APIs escalables del mundo real.

---

**💡 Disfruta explorando la API.**
Si tienes sugerencias o encuentras un error, no dudes en abrir un *issue* o enviar un *pull request*.

```

---

¿Querés que te genere también una **versión con emojis estilizados y enlaces de navegación (índice automático)** para que el README se vea aún más profesional en GitHub?
```
